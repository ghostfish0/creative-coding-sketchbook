/* autogenerated by Processing revision 1293 on 2023-09-12 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ant extends PApplet {

public class Ant {
    int x;
    int y;
    int pheromone_perstep;
    int step;

    double[][] pheromone;
    int[][] ants_count;
    int[][] food;

    
    public Ant(double[][] pheromone, int[][] ants_count, int[][] food) {
        this.x = 0;
        this.y = 0;
        this.step = 1;
        this.pheromone_perstep = 1;
        
        this.pheromone = pheromone;
        this.ants_count = ants_count;
        this.food = food;
        
        this.ants_count[0][0]++;
    }

    public void decide() {
        if (food[this.x][this.y] > 0) {
            this.step = -1;
            this.pheromone_perstep = 10;
            food[this.x][this.y]--;
        }
        // if (this.x == gridSize - 1 && this.y == gridSize - 1)
        if (this.x + this.y > gridSize) {
            this.step =  -1;
        //     noLoop();
        //     return;    
        }
        if (this.x == 0 && this.y == 0) {
            this.step = 1;
            this.pheromone_perstep = 1;
        }
        if (this.step == 1) {
            if (this.x == gridSize - 1) {
                if (random(1) < moveProbability(0, pheromone[this.x][this.y + 1]))
                arrive(false);
                return;
            }
            if (this.y == gridSize - 1) {
                if (random(1) < moveProbability(pheromone[this.x + 1][this.y], 0))
                arrive(true);
                return;
            }
        }
        else {
            if (this.x == 0) {
                if (random(1) < moveProbability(0, pheromone[this.x][this.y - 1]))
                arrive(false);
                return;
            }
            if (this.y == 0) {
                if (random(1) < moveProbability(pheromone[this.x - 1][this.y], 0))
                arrive(true);
                return;
            }
        }

        final int N1 = ants_count[this.x][this.y + this.step];
        final int N2 = ants_count[this.x + this.step][this.y];
        final double P1 = pheromone[this.x][this.y + this.step];
        final double P2 = pheromone[this.x + this.step][this.y];
        final double move_prob = moveProbability(P1, P2);
        if (N1 >= maxants_perpt && N2 >= maxants_perpt)
            return;
        else if (N1 >= maxants_perpt && N2 < maxants_perpt) {
            if (random(1) < move_prob)
            this.arrive(true);
            return;
        }
        else if (N1 < maxants_perpt && N2 >= maxants_perpt) {
            if (random(1) < move_prob)
            this.arrive(false);
            return;
        }
        
        if (random(1) < move_prob)
        this.arrive((random(1) < Deneubourg(P1, P2)));
    }
    
    public void arrive(boolean direction) {
        ants_count[this.x][this.y]--;
        if (direction)
            this.x += this.step;
        else
            this.y += this.step;
        ants_count[this.x][this.y]++;
        
        // lay pheromone
        final double curr = pheromone[this.x][this.y];
        pheromone[this.x][this.y] = (step ==  1) ? ((curr + pheromone_perstep > Psat_forwards) ? Psat_forwards : curr + pheromone_perstep) : ((curr + pheromone_perstep > Psat_backwards) ? Psat_backwards : curr + pheromone_perstep);
 
    }

}
public class Colony {
    double[][] pheromone = new double[gridSize][gridSize];
    double[][] pheromone_temp = new double[gridSize][gridSize];
    int[][] ants_count = new int[gridSize][gridSize];
    ArrayList<Ant> ants = new ArrayList<Ant>();
    int[][] food = new int[gridSize][gridSize] ;

    public Colony() {
        for(int i = 0; i < gridSize; i++)
            for(int j = 0; j < gridSize; j++) {
                this.food[i][j] = (random(1) < 0.5f) ? 1 : 0;
                // food[i][j] = (i + j > gridSize) ? ((random(1) < 0.5) ? 1 : 0) : 0;
                this.ants_count[i][j] = 0;
                this.pheromone[i][j] = 0;
            }

    }

    private void deploy_ants() {
        for(int i = 0; i < antsdeploy_perstep; i++) {
            this.ants.add(new Ant(this.pheromone_temp, this.ants_count, this.food));
        }
    }

    public void advance_simulate_step() {
        if (this.ants.size() < maxants) 
            deploy_ants();
        arrayCopy(pheromone, this.pheromone_temp);
        for(int i = 0; i < ants.size(); i++) {
        Ant ant = ants.get(i);
        ant.decide();
    }
    for(int i = 0; i < gridSize; i++)
        for(int j = 0; j < gridSize; j++) {
            pheromone[i][j] = pheromone_temp[i][j] * evaporation_rate; 
        }
    }

    public void drawField() {
        pg.beginDraw();
        for(int i = 0; i < gridSize; i++)
            for(int j = 0; j < gridSize; j++) {
                // color colore = lerpColor(color(theme[0]), color(theme[1]), map(ants_count[i][j], 0, maxants_perpt, 0, 1));
                final float r = map(ants_count[i][j], 0, maxants_perpt, 0, 1);
                // color colore = lerpColor(theme[0], theme[1], r);
                int colore = (r < 0.8f ? lerpColor(theme[0], theme[1], map(r, 0, 0.8f, 0, 1)) : lerpColor(theme[1], theme[2], map(r, 0.8f, 1, 0, 1))); 
                // color colore = ants_count[i][j] > 0 ? theme[1] : theme[0];
                // final int r = (int) map((float) ants_count[i][j], 0, maxants_perpt, 0, 255); 
                // final int b = (pheromone[i][j] > 0.001 ? 255 : 0);
                // final int b = (int) map((float)pheromone[i][j], 0, Psat_backwards, 0, 255);
                // final int b = 0;
                 
                // color colore = color(r, 0, b);
                pg.set(i, j, colore);

                // colore = lerpColor(color(theme[0]), color(theme[2]), map(food[i][j], 0, 400, 0, 1));
                // fill(colore);
                // if (food[i][j] > 0)
                // pg.set(i, j, colore);
        }
        pg.endDraw();
        rectMode(CENTER);
        translate(width/2, height);
        rotate(PI * 5.0f / 4);
        // image(pg, 0, 0);
        image(pg, 0, 0, canvasRotated, canvasRotated);
    }
}
static final float inc = 0.01f;
static final float scl = 20.0f;
static final int canvasWidth = 200;  
static final int canvasHeight = 200;  
static final int cols = Math.floor(canvasWidth / scl);
static final int rows = Math.floor(canvasHeight / scl);

int[] theme = {
    // color(200),
    // color(0),
    // color(0),
    color(0),
    color(255, 0, 0),
    color(255, 204, 0),
};


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "ant" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
